import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import TG_TOKEN, ADMIN_IDS
from db.models import create_tables
import datetime  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from openpyxl import Workbook
from db.models import Session, User, Order


bot = Bot(token=TG_TOKEN)
dp = Dispatcher()

TOTAL_PHOTOS = 117
PHOTO_DIR = "photo"
PHOTO_SECTIONS = {
    "fasad": {"name": "–§–∞—Å–∞–¥", "count": 21, "path": "photo/fasad_21"},
    "kitchen": {"name": "–ö—É—Ö–Ω—è", "count": 7, "path": "photo/kitchen_7"},
    "bedroom1": {"name": "–°–ø–∞–ª—å–Ω—è ‚Ññ1", "count": 6, "path": "photo/bedroom_6"},
    "bedroom2": {"name": "–°–ø–∞–ª—å–Ω—è ‚Ññ2", "count": 4, "path": "photo/bedroom_4"},
    "biliard": {"name": "–ë–∏–ª—å—è—Ä–¥–Ω–∞—è", "count": 4, "path": "photo/biliard_4"},
    "boiler": {"name": "–ë–æ–π–ª–µ—Ä–Ω–∞—è", "count": 4, "path": "photo/boiler_4"},
    "cokol": {"name": "–¶–æ–∫–æ–ª—å–Ω—ã–π —ç—Ç–∞–∂", "count": 9, "path": "photo/cokol_9"},
    "fligel": {"name": "–§–ª–∏–≥–µ–ª—å", "count": 42, "path": "photo/fligel_42"},
    "master": {"name": "–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è", "count": 6, "path": "photo/master_6"},
    "football": {"name": "–§—É—Ç–±–æ–ª—å–Ω–æ–µ –ø–æ–ª–µ", "count": 3, "path": "photo/football_3"},
    "oka": {"name": "–û–∫–∞", "count": 2, "path": "photo/oka_2"},
    "forest": {"name": "–õ–µ—Å", "count": 2, "path": "photo/forest_2"},
    "rodnik": {"name": "–†–æ–¥–Ω–∏–∫", "count": 6, "path": "photo/rodnik_6"},
}


class AppointmentStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()


# ===== –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä =====
def main_menu_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å —ç–º–æ–¥–∑–∏"""
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="üè† –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –¥–æ–º–µ",
            callback_data="details"
        ),
        types.InlineKeyboardButton(
            text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä",
            callback_data="appointment"
        ),
        types.InlineKeyboardButton(
            text="üë§ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º",
            url="https://t.me/Boris69m"
        )
    )
    builder.adjust(1)
    return builder.as_markup()


def details_menu_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π —Å —ç–º–æ–¥–∑–∏"""
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="üìä –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
            callback_data="features"
        ),
        types.InlineKeyboardButton(
            text="üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å",
            callback_data="price"
        ),
        types.InlineKeyboardButton(
            text="üìè –ü–ª–æ—â–∞–¥—å –¥–æ–º–∞",
            callback_data="area"
        ),
        types.InlineKeyboardButton(
            text="üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
            callback_data="location"
        ),
        types.InlineKeyboardButton(
            text="üìã –ü–ª–∞–Ω –¥–æ–º–∞",
            callback_data="plan"
        ),
        types.InlineKeyboardButton(
            text="üñºÔ∏è –§–æ—Ç–æ",
            callback_data="photos"
        ),
        types.InlineKeyboardButton(
            text="üé¨ –í–∏–¥–µ–æ",
            callback_data="videos"
        ),
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_main"
        )
    )
    builder.adjust(1, 2, 2, 2, 1)
    return builder.as_markup()


def back_to_details_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥"""
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_details"
        )
    )
    return builder.as_markup()


def features_menu_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å —ç–º–æ–¥–∑–∏"""
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="üè° –ì–ª–∞–≤–Ω—ã–π –¥–æ–º",
            callback_data="main_house"
        ),
        types.InlineKeyboardButton(
            text="üõñ –ì–æ—Å—Ç–µ–≤–æ–π –¥–æ–º",
            callback_data="guest_house"
        ),
        types.InlineKeyboardButton(
            text="üå≥ –ü—Ä–∏—É—Å–∞–¥–µ–±–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è",
            callback_data="territory"
        ),
        types.InlineKeyboardButton(
            text="‚≠ê –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞",
            callback_data="benefits"
        ),
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_details"
        )
    )
    builder.adjust(1, 1, 1)
    return builder.as_markup()


def main_house_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –≥–ª–∞–≤–Ω–æ–≥–æ –¥–æ–º–∞ —Å —ç–º–æ–¥–∑–∏"""
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="üß± –ú–∞—Ç–µ—Ä–∏–∞–ª—ã",
            callback_data="materials"
        ),
        types.InlineKeyboardButton(
            text="1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂",
            callback_data="first_floor"
        ),
        types.InlineKeyboardButton(
            text="2Ô∏è‚É£ –í—Ç–æ—Ä–æ–π —ç—Ç–∞–∂",
            callback_data="second_floor"
        ),
        types.InlineKeyboardButton(
            text="üè¢ –¶–æ–∫–æ–ª—å–Ω—ã–π —ç—Ç–∞–∂",
            callback_data="basement"
        ),
        types.InlineKeyboardButton(
            text="üîº –ú–∞–Ω—Å–∞—Ä–¥–∞",
            callback_data="attic"
        ),
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_features"
        )
    )
    builder.adjust(2, 2, 1, 1)
    return builder.as_markup()


def back_to_main_house_kb():
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é –≥–ª–∞–≤–Ω–æ–≥–æ –¥–æ–º–∞"""
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_main_house"
        )
    )
    return builder.as_markup()


def back_to_features_kb():
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_features"
        )
    )
    return builder.as_markup()


def photo_sections_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ —Ñ–æ—Ç–æ"""
    builder = InlineKeyboardBuilder()

    sections = list(PHOTO_SECTIONS.items())
    for i in range(0, len(sections), 2):
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        row = sections[i:i + 2]
        for section_key, section_data in row:
            builder.add(types.InlineKeyboardButton(
                text=section_data["name"],
                callback_data=f"open_section_{section_key}_1"
            ))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.add(types.InlineKeyboardButton(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back_details"
    ))

    builder.adjust(2, 2, 2, 2, 2, 2, 2, 1)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É, –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥ - 1 –∫–Ω–æ–ø–∫–∞
    return builder.as_markup()


def section_photo_navigation_kb(section: str, photo_index: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ –≤ —Ä–∞–∑–¥–µ–ª–µ"""
    section_data = PHOTO_SECTIONS.get(section)
    if not section_data:
        return None

    total_photos = section_data["count"]
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if photo_index > 1:
        builder.add(types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"prev_sec_{section}_{photo_index - 1}"
        ))

    if photo_index < total_photos:
        builder.add(types.InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è",
            callback_data=f"next_sec_{section}_{photo_index + 1}"
        ))

    # –ö–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª–∞–º ‚óÄÔ∏è",
        callback_data="photo_sections"
    ))


    # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    if photo_index > 1 and photo_index < total_photos:
        builder.adjust(2, 2)  # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤–æ –≤—Ç–æ—Ä–æ–º
    else:
        builder.adjust(1, 2)  # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –∑–∞—Ç–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞

    return builder.as_markup()


def plan_navigation_kb(photo_index: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ –ø–ª–∞–Ω–∞"""
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤–∞—è —Ñ–æ—Ç–æ)
    if photo_index > 1:
        builder.add(
            types.InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"prev_plan_{photo_index - 1}"
            )
        )

    # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ñ–æ—Ç–æ)
    if photo_index < 3:
        builder.add(
            types.InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è",
                callback_data=f"next_plan_{photo_index + 1}"
            )
        )

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    builder.add(
        types.InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚óÄÔ∏è",
            callback_data="back_details_from_photo"
        )
    )

    # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    if photo_index > 1 and photo_index < 3:
        builder.adjust(2, 1)  # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –æ–¥–Ω–∞ –≤–æ –≤—Ç–æ—Ä–æ–π
    else:
        builder.adjust(1)  # –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü

    return builder.as_markup()


# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π =====
@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    with Session() as session:
        user = session.get(User, message.from_user.id)
        if not user:
            new_user = User(
                user_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                time_start=datetime.datetime.now()
            )
            session.add(new_user)
            session.commit()

    await message.answer(
        "üè° –ü—Ä–æ–¥–∞–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —É—Å–∞–¥—å–±–∞ –≤ –∂–∏–≤–æ–ø–∏—Å–Ω–æ–º —É–≥–æ–ª–∫–µ –ö–∞–ª—É–∂—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ "
        "–Ω–∞ –≤—ã—Å–æ–∫–æ–º –ø—Ä–∞–≤–æ–º –±–µ—Ä–µ–≥—É –û–∫–∏ –≤ 160 –∫–º –æ—Ç –ú–ö–ê–î.",
        reply_markup=main_menu_kb()
    )


# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ =====
@dp.callback_query(F.data == "details")
async def details_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π"""
    await callback.message.edit_text(
        "üå≥ –≠—Ç–∞ –≤–ø–µ—á–∞—Ç–ª—è—é—â–∞—è —É—Å–∞–¥—å–±–∞ –ø–ª–æ—â–∞–¥—å—é 1,6 –≥–µ–∫—Ç–∞—Ä–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –Ω–∞ "
        "–∂–∏–≤–æ–ø–∏—Å–Ω–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –≤–µ–∫–æ–≤—ã—Ö –ª–µ—Å–æ–≤ –∏ —Å–∫–∞–∑–æ—á–Ω—ã—Ö –æ–≤—Ä–∞–≥–æ–≤, "
        "–≤—Å–µ–≥–æ –≤ 8 –∫–º –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ –ö–∞–ª—É–≥–∏.\n\n"
        "‚úÖ –ò–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ü–µ–Ω–∏—Ç–µ–ª–µ–π –ø—Ä–∏—Ä–æ–¥—ã –∏ —É–µ–¥–∏–Ω–µ–Ω–∏—è, "
        "–∞ —Ç–∞–∫–∂–µ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∏—â–µ—Ç –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –≤–¥–∞–ª–∏ –æ—Ç –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–µ—Ç—ã.",
        reply_markup=details_menu_kb()
    )
    await callback.answer()


@dp.callback_query(F.data == "back_details_from_photo")
async def details_handler_from_photo(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –∏–∑ —Ñ–æ—Ç–æ/–ø–ª–∞–Ω–∞"""
    try:
        await callback.message.delete()
    except:
        pass

    await callback.message.answer(
        "üå≥ –≠—Ç–∞ –≤–ø–µ—á–∞—Ç–ª—è—é—â–∞—è —É—Å–∞–¥—å–±–∞ –ø–ª–æ—â–∞–¥—å—é 1,6 –≥–µ–∫—Ç–∞—Ä–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –Ω–∞ "
        "–∂–∏–≤–æ–ø–∏—Å–Ω–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –≤–µ–∫–æ–≤—ã—Ö –ª–µ—Å–æ–≤ –∏ —Å–∫–∞–∑–æ—á–Ω—ã—Ö –æ–≤—Ä–∞–≥–æ–≤, "
        "–≤—Å–µ–≥–æ –≤ 8 –∫–º –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ –ö–∞–ª—É–≥–∏.\n\n"
        "‚úÖ –ò–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ü–µ–Ω–∏—Ç–µ–ª–µ–π –ø—Ä–∏—Ä–æ–¥—ã –∏ —É–µ–¥–∏–Ω–µ–Ω–∏—è, "
        "–∞ —Ç–∞–∫–∂–µ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∏—â–µ—Ç –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –≤–¥–∞–ª–∏ –æ—Ç –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—É–µ—Ç—ã.",
        reply_markup=details_menu_kb()
    )
    await callback.answer()


@dp.callback_query(F.data == "features")
async def features_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
    await callback.message.edit_text(
        "üìä –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É—Å–∞–¥—å–±—ã:",
        reply_markup=features_menu_kb()
    )
    await callback.answer()

@dp.callback_query(F.data == "main_house")
async def main_house_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –¥–æ–º–∞"""
    await callback.message.edit_text(
        "üè° <b>–ì–ª–∞–≤–Ω—ã–π –¥–æ–º</b>:\n"
        "‚Ä¢ –ü–ª–æ—â–∞–¥—å: 1000 –∫–≤.–º\n"
        "‚Ä¢ –≠—Ç–∞–∂–∏: 3 —ç—Ç–∞–∂–∞ + –º–∞–Ω—Å–∞—Ä–¥–∞\n"
        "‚Ä¢ –°–ø–∞–ª—å–Ω–∏: 7\n"
        "‚Ä¢ –°–∞–Ω—É–∑–ª—ã: 7\n"
        "‚Ä¢ –ö—É—Ö–Ω–∏: 2\n"
        "‚Ä¢ –ö–∞–º–∏–Ω—ã: 2 + —Ä—É—Å—Å–∫–∞—è –ø–µ—á—å\n\n"
        "‚öôÔ∏è <b>–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏</b>:\n"
        "‚Ä¢ –ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã–π –≥–∞–∑ + 2 –≥–∞–∑–≥–æ–ª—å–¥–µ—Ä–∞ (10–º¬≥)\n"
        "‚Ä¢ –°–∫–≤–∞–∂–∏–Ω–∞ 80–º\n"
        "‚Ä¢ –°–µ–ø—Ç–∏–∫ 10–º¬≥\n"
        "‚Ä¢ –ì–∞–∑–æ–≤—ã–π —ç–ª–µ–∫—Ç—Ä–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä 15 –∫–í—Ç\n"
        "‚Ä¢ –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ: 35 –∫–í—Ç",
        parse_mode="HTML",
        reply_markup=main_house_kb()
    )
    await callback.answer()

@dp.callback_query(F.data == "materials")
async def materials_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    await callback.message.edit_text(
        "üß± <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</b>:\n"
        "‚Ä¢ –§—É–Ω–¥–∞–º–µ–Ω—Ç: –±–µ—Ç–æ–Ω–Ω–∞—è –º–æ–Ω–æ–ª–∏—Ç–Ω–∞—è –ø–ª–∏—Ç–∞\n"
        "‚Ä¢ –ì–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏—è: –≤–Ω–µ—à–Ω—è—è (–≥–∏–¥—Ä–æ–∏–∑–æ–ª) + –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è (–ü–µ–Ω–µ—Ç—Ä–æ–Ω)\n"
        "‚Ä¢ –°—Ç–µ–Ω—ã: –∫—Ä–∞—Å–Ω—ã–π –∫–∏—Ä–ø–∏—á + –æ–±–ª–∏—Ü–æ–≤–æ—á–Ω—ã–π –∫–∏—Ä–ø–∏—á\n"
        "‚Ä¢ –°—Ç—Ä–æ–ø–∏–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: –º–µ—Ç–∞–ª–ª (—à–≤–µ–ª–ª–µ—Ä, –±–∞–ª–∫–∏)\n"
        "‚Ä¢ –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: –º–µ–¥–Ω—ã–µ —Ç—Ä—É–±—ã (–≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ –∏ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ)\n\n"
        "‚úÖ –í—Å—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –æ—á–µ–Ω—å –¥–æ–±—Ä–æ—Ç–Ω–æ, –Ω–∞–¥—ë–∂–Ω–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ!",
        parse_mode="HTML",
        reply_markup=back_to_main_house_kb()
    )
    await callback.answer()

@dp.callback_query(F.data == "first_floor")
async def first_floor_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–∂–∞"""
    await callback.message.edit_text(
        "1Ô∏è‚É£ <b>–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂</b> –≤–∫–ª—é—á–∞–µ—Ç:\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ—Ä–Ω–∞—è –∫—É—Ö–Ω—è-–≥–æ—Å—Ç–∏–Ω–∞—è —Å —Ä—É—Å—Å–∫–æ–π –ø–µ—á—å—é\n"
        "‚Ä¢ –ë–æ–ª—å—à–∞—è —Å–ø–∞–ª—å–Ω—è —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º, —Å–∞–Ω—É–∑–ª–æ–º –∏ –∫–∞–º–∏–Ω–æ–º\n"
        "‚Ä¢ 2 —É—é—Ç–Ω—ã–µ —Å–ø–∞–ª—å–Ω–∏\n"
        "‚Ä¢ –ö–æ–º–Ω–∞—Ç–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n"
        "‚Ä¢ –ë—ã—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞\n"
        "‚Ä¢ 2 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–∞–Ω—É–∑–ª–∞\n"
        "‚Ä¢ –ë–æ–ª—å—à–æ–π —Ö–æ–ª–ª\n"
        "‚Ä¢ –ì–∞—Ä–∞–∂ –Ω–∞ 2 –º–∞—à–∏–Ω—ã",
        parse_mode="HTML",
        reply_markup=back_to_main_house_kb()
    )
    await callback.answer()

@dp.callback_query(F.data == "second_floor")
async def second_floor_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ç–æ—Ä–æ–≥–æ —ç—Ç–∞–∂–∞"""
    await callback.message.edit_text(
        "2Ô∏è‚É£ <b>–í—Ç–æ—Ä–æ–π —ç—Ç–∞–∂</b> –≤–∫–ª—é—á–∞–µ—Ç:\n"
        "‚Ä¢ –ö—É—Ö–Ω—è-–≥–æ—Å—Ç–∏–Ω–∞—è —Å –≤–æ—Å—Ç–æ—á–Ω—ã–º –∫–∞–º–∏–Ω–æ–º\n"
        "‚Ä¢ 3 —Å–ø–∞–ª—å–Ω–∏ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ —Å–∞–Ω—É–∑–ª–∞–º–∏\n"
        "‚Ä¢ –ì–æ—Å—Ç–µ–≤–æ–π —Å–∞–Ω—É–∑–µ–ª\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ—Ä–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ (–º–æ–∂–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Å–∞–ª–æ–Ω)\n"
        "‚Ä¢ –ü–æ–º–µ—â–µ–Ω–∏–µ —Å –±–∞—Ä–Ω–æ–π –∑–æ–Ω–æ–π –∏ –≤—ã—Å–æ–∫–∏–º–∏ –ø–æ—Ç–æ–ª–∫–∞–º–∏ (–∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –±–∏–ª—å—è—Ä–¥–∞)",
        parse_mode="HTML",
        reply_markup=back_to_main_house_kb()
    )
    await callback.answer()

@dp.callback_query(F.data == "basement")
async def basement_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–æ–∫–æ–ª—å–Ω–æ–≥–æ —ç—Ç–∞–∂–∞"""
    await callback.message.edit_text(
        "üè¢ <b>–¶–æ–∫–æ–ª—å–Ω—ã–π —ç—Ç–∞–∂</b> –≤–∫–ª—é—á–∞–µ—Ç:\n"
        "‚Ä¢ –ë–æ–π–ª–µ—Ä–Ω–∞—è (4 –∫–æ—Ç–ª–∞, 112–∫–í—Ç)\n"
        "‚Ä¢ –û–≤–æ—â–µ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–µ–π\n"
        "‚Ä¢ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª\n"
        "‚Ä¢ –ü–æ–º–µ—â–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–º–∞—Å—Ç–µ—Ä—Å–∫–∞—è, —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)",
        parse_mode="HTML",
        reply_markup=back_to_main_house_kb()
    )
    await callback.answer()

@dp.callback_query(F.data == "attic")
async def attic_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞–Ω—Å–∞—Ä–¥—ã"""
    await callback.message.edit_text(
        "üîº <b>–ú–∞–Ω—Å–∞—Ä–¥–∞</b>:\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ—Ä–Ω–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n"
        "‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –¥–µ—Ç—Å–∫–æ–π/–∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã\n"
        "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–ø–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç, —Ä–∞–±–æ—á–µ–π –∑–æ–Ω—ã –∏ —Å–∏—Å—Ç–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏—è",
        parse_mode="HTML",
        reply_markup=back_to_main_house_kb()
    )
    await callback.answer()

@dp.callback_query(F.data == "back_main_house")
async def back_main_house_handler(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –≥–ª–∞–≤–Ω–æ–≥–æ –¥–æ–º–∞"""
    await main_house_handler(callback)

@dp.callback_query(F.data == "back_features")
async def back_features_handler(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
    await features_handler(callback)

@dp.callback_query(F.data == "back_details")
async def back_details_handler(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π"""
    await details_handler(callback)

@dp.callback_query(F.data == "back_main")
async def back_main_handler(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üè° –ü—Ä–æ–¥–∞–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —É—Å–∞–¥—å–±–∞ –≤ –∂–∏–≤–æ–ø–∏—Å–Ω–æ–º —É–≥–æ–ª–∫–µ –ö–∞–ª—É–∂—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ "
        "–Ω–∞ –≤—ã—Å–æ–∫–æ–º –ø—Ä–∞–≤–æ–º –±–µ—Ä–µ–≥—É –û–∫–∏ –≤ 160 –∫–º –æ—Ç –ú–ö–ê–î.",
        reply_markup=main_menu_kb()
    )
    await callback.answer()

# ===== –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ =====
@dp.callback_query(F.data == "guest_house")
async def guest_house_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –¥–æ–º–∞"""
    await callback.message.edit_text(
        "üõñ <b>–ì–æ—Å—Ç–µ–≤–æ–π –¥–æ–º</b>:\n"
        "‚Ä¢ –ü–ª–æ—â–∞–¥—å: 300 –∫–≤.–º\n"
        "‚Ä¢ –≠—Ç–∞–∂–∏: 2\n"
        "‚Ä¢ –°–ø–∞–ª—å–Ω–∏: 4\n"
        "‚Ä¢ –°–∞–Ω—É–∑–ª—ã: 2\n"
        "‚Ä¢ –ö—É—Ö–Ω—è-–≥–æ—Å—Ç–∏–Ω–∞—è\n"
        "‚Ä¢ –û—Ç–¥–µ–ª–∫–∞ –≤ –æ—Ö–æ—Ç–Ω–∏—á—å–µ–º —Å—Ç–∏–ª–µ\n\n"
        "‚öôÔ∏è <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</b>:\n"
        "‚Ä¢ –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è\n"
        "‚Ä¢ –ì–∞—Ä–∞–∂ –Ω–∞ 2 –º–∞—à–∏–Ω—ã\n"
        "‚Ä¢ –•–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ–∫—Å",
        parse_mode="HTML",
        reply_markup=back_to_features_kb()
    )
    await callback.answer()

@dp.callback_query(F.data == "territory")
async def territory_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏—É—Å–∞–¥–µ–±–Ω–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏"""
    await callback.message.edit_text(
        "üå≥ <b>–ü—Ä–∏—É—Å–∞–¥–µ–±–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è</b> (1.6 –≥–∞):\n"
        "‚Ä¢ –£—Ö–æ–∂–µ–Ω–Ω—ã–π —Å–∞–¥ —Å –±–µ—Å–µ–¥–∫–æ–π\n"
        "‚Ä¢ –ó–æ–Ω–∞ –±–∞—Ä–±–µ–∫—é\n"
        "‚Ä¢ –û–≥–æ—Ä–æ–¥ –∏ —Ç–µ–ø–ª–∏—Ü–∞\n"
        "‚Ä¢ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å\n"
        "‚Ä¢ –õ–µ—Å–Ω–æ–π –º–∞—Å—Å–∏–≤",
        parse_mode="HTML",
        reply_markup=back_to_features_kb()
    )
    await callback.answer()

@dp.callback_query(F.data == "benefits")
async def benefits_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤"""
    await callback.message.edit_text(
        "‚≠ê <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —É—Å–∞–¥—å–±—ã</b>:\n"
        "‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –∞–≥—Ä–æ—Ç—É—Ä–∏–∑–º–∞ –∏–ª–∏ –±–∏–∑–Ω–µ—Å–∞ (–æ—Ç–µ–ª—å, —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)\n"
        "‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –ú–∞–≥–∞–∑–∏–Ω—ã –∏ –∞–ø—Ç–µ–∫–∏ –≤ 3 –∫–º\n"
        "‚Ä¢ –†—ã–±–∞–ª–∫–∞ –Ω–∞ –û–∫–µ üé£\n"
        "‚Ä¢ –ß–∏—Å—Ç—ã–π —Ä–æ–¥–Ω–∏–∫ —Å –≤–∫—É—Å–Ω–æ–π –≤–æ–¥–æ–π\n"
        "‚Ä¢ –õ–µ—Å–Ω—ã–µ —Ç—Ä–∞—Å—Å—ã –¥–ª—è –∫–≤–∞–¥—Ä–æ—Ü–∏–∫–ª–æ–≤\n\n"
        "üåÑ <b>–û–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏</b>:\n"
        "‚Ä¢ –û–ø—Ç–∏–Ω–∞ –ü—É—Å—Ç—ã–Ω—å (1 —á–∞—Å –µ–∑–¥—ã)\n"
        "‚Ä¢ –®–∞–º–æ—Ä–¥–∏–Ω—Å–∫–∏–π –º–æ–Ω–∞—Å—Ç—ã—Ä—å\n"
        "‚Ä¢ –ì–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–π —Å–ø—É—Å–∫, –ø–∞—Ä–∫–∏, —Ç–µ–∞—Ç—Ä—ã –∏ –º—É–∑–µ–∏ –ö–∞–ª—É–≥–∏",
        parse_mode="HTML",
        reply_markup=back_to_features_kb()
    )
    await callback.answer()

@dp.callback_query(F.data == "price")
async def price_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    await callback.message.edit_text(
        "üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b>: 145 –º–ª–Ω.—Ä—É–±.\n"
        "–¶–µ–Ω–∞ –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Å–º–æ—Ç—Ä–µ –æ–±—ä–µ–∫—Ç–∞.",
        parse_mode="HTML",
        reply_markup=back_to_details_kb()
    )
    await callback.answer()

@dp.callback_query(F.data == "area")
async def area_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–æ—â–∞–¥–∏ –¥–æ–º–∞"""
    await callback.message.edit_text(
        "üìè <b>–ü–ª–æ—â–∞–¥–∏ –æ–±—ä–µ–∫—Ç–æ–≤</b>:\n"
        "‚Ä¢ –ì–ª–∞–≤–Ω—ã–π –¥–æ–º: 1000 –∫–≤.–º\n"
        "‚Ä¢ –ì–æ—Å—Ç–µ–≤–æ–π –¥–æ–º: 300 –∫–≤.–º\n"
        "‚Ä¢ –ó–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫: 1.6 –≥–∞",
        parse_mode="HTML",
        reply_markup=back_to_details_kb()
    )
    await callback.answer()

@dp.callback_query(F.data == "location")
async def location_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    await callback.message.edit_text(
        "üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</b>:\n"
        "–ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –ø—Ä–∞–≤—ã–π –±–µ—Ä–µ–≥ –û–∫–∏\n"
        "‚Ä¢ 160 –∫–º –æ—Ç –ú–ö–ê–î\n"
        "‚Ä¢ 8 –∫–º –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –ö–∞–ª—É–≥–∏",
        parse_mode="HTML",
        reply_markup=back_to_details_kb()
    )
    await callback.answer()


@dp.callback_query(F.data == "appointment")
async def start_appointment(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä"""
    await callback.message.edit_text(
        "üìù –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è:",
        reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await state.set_state(AppointmentStates.waiting_for_name)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–æ–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏"
@dp.message(AppointmentStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏"""
    await state.update_data(name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
    await state.set_state(AppointmentStates.waiting_for_phone)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
@dp.message(AppointmentStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    user_data = await state.get_data()
    name = user_data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')
    phone = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
    with Session() as session:
        new_order = Order(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            phone=phone,
            fio=name,
            time_order=datetime.datetime.now()
        )
        session.add(new_order)
        session.commit()


    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                f"üìã –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä:\n\nüë§ –ò–º—è: {name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n‚ÜóÔ∏è TG: @{message.from_user.username}"
            )
        except:
            pass

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã —Å –í–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!",
        reply_markup=main_menu_kb()
    )


# –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ (—É–±–∏—Ä–∞–µ–º 'appointment' –∏–∑ —Å–ø–∏—Å–∫–∞)
@dp.callback_query(F.data.in_(["videos"]))
async def not_implemented_handler(callback: types.CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤"""
    await callback.answer("‚è≥ –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


@dp.callback_query(F.data == "plan")
async def plan_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–ª–∞–Ω –¥–æ–º–∞"""
    try:
        await callback.message.delete()
    except:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –ø–ª–∞–Ω–∞
    photo_index = 1
    photo_path = os.path.join("plan", f"{photo_index}.jpg")

    if os.path.exists(photo_path):
        with open(photo_path, "rb") as photo_file:
            await callback.message.answer_photo(
                photo=types.FSInputFile(photo_path),
                caption=f"–ü–ª–∞–Ω –¥–æ–º–∞ ({photo_index}/3)",
                reply_markup=plan_navigation_kb(photo_index)
            )
    else:
        await callback.message.answer("–§–æ—Ç–æ –ø–ª–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

    await callback.answer()


@dp.callback_query(F.data.startswith("prev_plan_"))
async def prev_plan_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –¥–ª—è –ø–ª–∞–Ω–∞"""
    photo_index = int(callback.data.split("_")[-1])
    photo_path = os.path.join("plan", f"{photo_index}.jpg")

    if os.path.exists(photo_path):
        media = InputMediaPhoto(
            media=types.FSInputFile(photo_path),
            caption=f"–ü–ª–∞–Ω –¥–æ–º–∞ ({photo_index}/3)"
        )
        await callback.message.edit_media(
            media=media,
            reply_markup=plan_navigation_kb(photo_index)
        )
    await callback.answer()


@dp.callback_query(F.data.startswith("next_plan_"))
async def next_plan_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –í–ø–µ—Ä–µ–¥ –¥–ª—è –ø–ª–∞–Ω–∞"""
    photo_index = int(callback.data.split("_")[-1])
    photo_path = os.path.join("plan", f"{photo_index}.jpg")

    if os.path.exists(photo_path):
        media = InputMediaPhoto(
            media=types.FSInputFile(photo_path),
            caption=f"–ü–ª–∞–Ω –¥–æ–º–∞ ({photo_index}/3)"
        )
        await callback.message.edit_media(
            media=media,
            reply_markup=plan_navigation_kb(photo_index)
        )
    await callback.answer()


@dp.message(Command("export"))
async def export_command(message: types.Message):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel —Ñ–∞–π–ª"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É Excel
    wb = Workbook()

    # –õ–∏—Å—Ç –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ (Order)
    orders_sheet = wb.active
    orders_sheet.title = "Orders"

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
    orders_headers = [
        "ID", "User ID", "Username", "First Name",
        "Last Name", "Phone", "FIO", "Time Order"
    ]
    orders_sheet.append(orders_headers)

    # –õ–∏—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (User)
    users_sheet = wb.create_sheet(title="Users")

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_headers = [
        "User ID", "Username", "First Name",
        "Last Name", "Time Start"
    ]
    users_sheet.append(users_headers)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    with Session() as session:
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤
        orders = session.query(Order).all()
        for order in orders:
            orders_sheet.append([
                order.id,
                order.user_id,
                order.username,
                order.first_name,
                order.last_name,
                order.phone,
                order.fio,
                order.time_order.strftime("%Y-%m-%d %H:%M:%S") if order.time_order else ""
            ])

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = session.query(User).all()
        for user in users:
            users_sheet.append([
                user.user_id,
                user.username,
                user.first_name,
                user.last_name,
                user.time_start.strftime("%Y-%m-%d %H:%M:%S") if user.time_start else ""
            ])

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
    for col in orders_sheet.columns:
        orders_sheet.column_dimensions[col[0].column_letter].width = 20

    for col in users_sheet.columns:
        users_sheet.column_dimensions[col[0].column_letter].width = 20

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    filename = "export.xlsx"
    wb.save(filename)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open(filename, "rb") as file:
        await message.answer_document(
            document=types.FSInputFile(filename),
            caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã"
        )

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    import os
    os.remove(filename)


@dp.callback_query(F.data == "photos")
async def photos_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –§–æ—Ç–æ"""
    try:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Ñ–æ—Ç–æ:",
            reply_markup=photo_sections_kb()
        )
    except:
        await callback.message.delete()
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Ñ–æ—Ç–æ:",
            reply_markup=photo_sections_kb()
        )
    await callback.answer()


@dp.callback_query(F.data == "photo_sections")
async def photo_sections_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–∞–∑–¥–µ–ª–∞–º —Ñ–æ—Ç–æ"""
    await photos_handler(callback)


@dp.callback_query(F.data.startswith("open_section_"))
async def open_section_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–∞–∑–¥–µ–ª–∞ —Ñ–æ—Ç–æ"""
    data = callback.data.split("_")
    section = data[2]
    photo_index = int(data[3])

    section_data = PHOTO_SECTIONS.get(section)
    if not section_data:
        await callback.answer("–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    photo_path = os.path.join(section_data["path"], f"{photo_index}.jpg")

    if os.path.exists(photo_path):
        try:
            await callback.message.delete()
        except:
            pass

        with open(photo_path, "rb") as photo_file:
            await callback.message.answer_photo(
                photo=types.FSInputFile(photo_path),
                caption=f"{section_data['name']} ({photo_index}/{section_data['count']})",
                reply_markup=section_photo_navigation_kb(section, photo_index)
            )
    else:
        await callback.answer("–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    await callback.answer()


@dp.callback_query(F.data.startswith("prev_sec_"))
async def prev_sec_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –≤ —Ä–∞–∑–¥–µ–ª–µ —Ñ–æ—Ç–æ"""
    data = callback.data.split("_")
    section = data[2]
    photo_index = int(data[3])

    await open_photo_in_section(callback, section, photo_index)


@dp.callback_query(F.data.startswith("next_sec_"))
async def next_sec_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –í–ø–µ—Ä–µ–¥ –≤ —Ä–∞–∑–¥–µ–ª–µ —Ñ–æ—Ç–æ"""
    data = callback.data.split("_")
    section = data[2]
    photo_index = int(data[3])

    await open_photo_in_section(callback, section, photo_index)


async def open_photo_in_section(callback: types.CallbackQuery, section: str, photo_index: int):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ"""
    section_data = PHOTO_SECTIONS.get(section)
    if not section_data:
        await callback.answer("–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    photo_path = os.path.join(section_data["path"], f"{photo_index}.jpg")

    if os.path.exists(photo_path):
        media = InputMediaPhoto(
            media=types.FSInputFile(photo_path),
            caption=f"{section_data['name']} ({photo_index}/{section_data['count']})"
        )
        await callback.message.edit_media(
            media=media,
            reply_markup=section_photo_navigation_kb(section, photo_index)
        )
    else:
        await callback.answer("–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    await callback.answer()


async def main() -> None:
    create_tables()
    logging.basicConfig(level=logging.INFO, format='%(filename)s:%(lineno)d %(levelname)-8s [%(asctime)s] - %(name)s - %(message)s')
    logging.info('Starting bot')

    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())